// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: bilibili.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct DmSegMobileReply: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var elems: [DanmakuElem] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct DanmakuElem: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Int64 = 0

  var progress: Int32 = 0

  var mode: Int32 = 0

  var fontsize: Int32 = 0

  var color: UInt32 = 0

  var midHash: String = String()

  var content: String = String()

  var ctime: Int64 = 0

  var weight: Int32 = 0

  var action: String = String()

  var pool: Int32 = 0

  var idStr: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "dm"

extension DmSegMobileReply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DmSegMobileReply"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}elems\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.elems) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.elems.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.elems, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: DmSegMobileReply, rhs: DmSegMobileReply) -> Bool {
    if lhs.elems != rhs.elems {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DanmakuElem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DanmakuElem"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}id\0\u{1}progress\0\u{1}mode\0\u{1}fontsize\0\u{1}color\0\u{1}midHash\0\u{1}content\0\u{1}ctime\0\u{1}weight\0\u{1}action\0\u{1}pool\0\u{1}idStr\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.id) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.progress) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.mode) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.fontsize) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self.color) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.midHash) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.content) }()
      case 8: try { try decoder.decodeSingularInt64Field(value: &self.ctime) }()
      case 9: try { try decoder.decodeSingularInt32Field(value: &self.weight) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self.action) }()
      case 11: try { try decoder.decodeSingularInt32Field(value: &self.pool) }()
      case 12: try { try decoder.decodeSingularStringField(value: &self.idStr) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    if self.progress != 0 {
      try visitor.visitSingularInt32Field(value: self.progress, fieldNumber: 2)
    }
    if self.mode != 0 {
      try visitor.visitSingularInt32Field(value: self.mode, fieldNumber: 3)
    }
    if self.fontsize != 0 {
      try visitor.visitSingularInt32Field(value: self.fontsize, fieldNumber: 4)
    }
    if self.color != 0 {
      try visitor.visitSingularUInt32Field(value: self.color, fieldNumber: 5)
    }
    if !self.midHash.isEmpty {
      try visitor.visitSingularStringField(value: self.midHash, fieldNumber: 6)
    }
    if !self.content.isEmpty {
      try visitor.visitSingularStringField(value: self.content, fieldNumber: 7)
    }
    if self.ctime != 0 {
      try visitor.visitSingularInt64Field(value: self.ctime, fieldNumber: 8)
    }
    if self.weight != 0 {
      try visitor.visitSingularInt32Field(value: self.weight, fieldNumber: 9)
    }
    if !self.action.isEmpty {
      try visitor.visitSingularStringField(value: self.action, fieldNumber: 10)
    }
    if self.pool != 0 {
      try visitor.visitSingularInt32Field(value: self.pool, fieldNumber: 11)
    }
    if !self.idStr.isEmpty {
      try visitor.visitSingularStringField(value: self.idStr, fieldNumber: 12)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: DanmakuElem, rhs: DanmakuElem) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.progress != rhs.progress {return false}
    if lhs.mode != rhs.mode {return false}
    if lhs.fontsize != rhs.fontsize {return false}
    if lhs.color != rhs.color {return false}
    if lhs.midHash != rhs.midHash {return false}
    if lhs.content != rhs.content {return false}
    if lhs.ctime != rhs.ctime {return false}
    if lhs.weight != rhs.weight {return false}
    if lhs.action != rhs.action {return false}
    if lhs.pool != rhs.pool {return false}
    if lhs.idStr != rhs.idStr {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
